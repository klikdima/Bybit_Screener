import requests
import asyncio
import logging
import time
import aiohttp
import re
from collections import Counter
from typing import Optional
from bybit_fetch import get_data
from screener_config import (
    RSI_LOW, RSI_HIGH,
    FUNDING_THRESHOLD, PRICE_THRESHOLD, VOLUME_RATIO_THRESHOLD,
    OI_DELTA_THRESHOLD, IMBALANCE_THRESHOLD, VOLATILITY_THRESHOLD,
    SPOT_FUTURES_SPREAD, MIN_MATCHES
)

logger = logging.getLogger(__name__)
_symbol_cache = {"symbols": [], "timestamp": 0}

def get_tv_deeplink(symbol: str) -> str:
    return f"tradingview://symbol/BYBIT-{symbol}.P"

def get_all_symbols(min_volume: float = 10_000_000) -> list:
    now = time.time()
    if now - _symbol_cache["timestamp"] < 60:
        return _symbol_cache["symbols"]

    url = "https://api.bybit.com/v5/market/tickers?category=linear"
    try:
        resp = requests.get(url, timeout=10)
        resp.raise_for_status()
        data = resp.json()
    except requests.RequestException:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Å Bybit")
        return _symbol_cache["symbols"]

    symbols_list = data.get("result", {}).get("list", [])
    filtered = []
    for s in symbols_list:
        sym = s.get("symbol", "")
        if not sym.endswith("USDT"):
            continue
        if any(x in sym for x in ["1000", "USDC", "BUSD", "DYDX", "MEME"]):
            continue
        turnover = s.get("turnover24h") or s.get("turnover_24h", 0)
        try:
            vol = float(turnover)
        except (TypeError, ValueError):
            vol = 0.0
        if vol >= min_volume:
            filtered.append(sym)

    _symbol_cache["symbols"] = filtered
    _symbol_cache["timestamp"] = now
    return filtered

async def get_oi_and_delta(symbol: str, interval: str = "5min") -> tuple[float, float]:
    url = f"https://api.bybit.com/v5/market/open-interest?category=linear&symbol={symbol}&intervalTime={interval}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
        lst = data.get("result", {}).get("list", []) if data else []
        if len(lst) < 2:
            return 0.0, 0.0
        oi_prev = float(lst[-2].get("openInterest", 0))
        oi_now = float(lst[-1].get("openInterest", 0))
        delta_pct = round((oi_now - oi_prev) / oi_prev * 100, 2) if oi_prev else 0.0
        return oi_now, delta_pct
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OI {symbol}: {e}")
        return 0.0, 0.0

async def get_spot_derivative_spread(symbol="BTCUSDT"):
    url_deriv = "https://api.bybit.com/v5/market/tickers?category=linear"
    url_spot = "https://api.bybit.com/v5/market/tickers?category=spot"
    price_deriv = price_spot = None

    try:
        async with aiohttp.ClientSession() as session:
            # –î–µ—Ä–∏–≤–∞—Ç–∏–≤—ã
            async with session.get(url_deriv) as resp:
                d = await resp.json()
                for t in d.get("result", {}).get("list", []):
                    if t.get("symbol") == symbol:
                        price_deriv = float(t.get("lastPrice", 0))
                        break
            # –°–ø–æ—Ç
            async with session.get(url_spot) as resp:
                d = await resp.json()
                for t in d.get("result", {}).get("list", []):
                    if t.get("symbol") == symbol:
                        price_spot = float(t.get("lastPrice", 0))
                        break

        if price_deriv is None or price_spot is None:
            return None, None, None, None

        spread = price_deriv - price_spot
        spread_pct = (spread / price_spot) * 100 if price_spot else 0
        return price_deriv, price_spot, spread, spread_pct
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ spread {symbol}: {e}")
        return None, None, None, None

async def get_orderbook_imbalance(symbol="BTCUSDT", depth=25):
    url = f"https://api.bybit.com/v5/market/orderbook?category=linear&symbol={symbol}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
        bids = data.get("result", {}).get("b", [])[:depth]
        asks = data.get("result", {}).get("a", [])[:depth]
        total_bids = sum(float(b[1]) for b in bids)
        total_asks = sum(float(a[1]) for a in asks)
        total = total_bids + total_asks
        if total == 0:
            return None, None
        buy_pct = total_bids / total * 100
        sell_pct = total_asks / total * 100
        return round(buy_pct, 1), round(sell_pct, 1)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ Imbalance {symbol}: {e}")
        return None, None

async def get_last_closed_candle(symbol: str):
    url = f"https://api.bybit.com/v5/market/kline?category=linear&symbol={symbol}&interval=1&limit=2"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
        # –ë–µ—Ä—ë–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é ([-2]), –æ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞!
        candle = data.get("result", {}).get("list", [])[-2]
        return {
            "open": float(candle[1]),
            "close": float(candle[4]),
            "volume": float(candle[5])
        }
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ get_last_closed_candle –¥–ª—è {symbol}: {e}")
        return None



async def get_volatility(symbol: str, interval: str = "5", count: int = 20) -> Optional[float]:
    url = f"https://api.bybit.com/v5/market/kline?category=linear&symbol={symbol}&interval={interval}&limit={count}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    return None
                data = await resp.json()
        candles = data.get("result", {}).get("list", [])
        if len(candles) < count:
            return None
        highs = [float(c[2]) for c in candles]
        lows = [float(c[3]) for c in candles]
        ranges = [h - l for h, l in zip(highs, lows)]
        avg_range = sum(ranges) / len(ranges)
        avg_size = sum([(h + l) / 2 for h, l in zip(highs, lows)]) / len(candles)
        if avg_size == 0:
            return None
        volatility = (avg_range / avg_size) * 100
        return volatility
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ {symbol}: {e}")
        return None

def escape_markdown(text: str) -> str:
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

# --- –ü—Ä–∏–º–µ—Ä—ã async —Å–∫–∞–Ω–µ—Ä–æ–≤ ---

from screener_config import PRICE_THRESHOLD

async def scan_price_spikes(price_threshold=PRICE_THRESHOLD):
    symbols = get_all_symbols()
    movers = []
    for symbol in symbols:
        try:
            candle = await asyncio.wait_for(get_last_closed_candle(symbol), timeout=10)
            if not candle:
                continue
            open_price = candle["open"]
            close_price = candle["close"]
            change_pct = (close_price - open_price) / open_price * 100
            if abs(change_pct) >= price_threshold:
                movers.append((symbol, change_pct))
        except Exception as e:
            logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–Ω—ã {symbol}: {e}")
    # –¥–∞–ª—å—à–µ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É


async def get_rsi_signal(symbol: str):
    timeframes = {"1m": "1", "5m": "5", "15m": "15", "1h": "60", "4h": "240", "1d": "D"}
    data = {}
    funding = price = volume = volume_ratio = price_change_pct = oi = oi_delta = None

    try:
        d5m = await asyncio.wait_for(get_data(symbol, "5"), timeout=10)
        if not d5m:
            logger.error(f"[{symbol}] get_data(5m) –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ –ø—É—Å—Ç–æ")
            for label in timeframes:
                data[label] = None
            fut_spot_str = ""
            imbalance_str = ""
            volatility_str = "–Ω/–¥"
            price_str = funding_str = volume_str = volume_ratio_str = price_change_str = oi_str = oi_delta_str = "–Ω/–¥"
        else:
            price = d5m.get("price")
            funding = d5m.get("funding_rate")
            volume = d5m.get("volume")
            volume_ratio = d5m.get("volume_ratio")
            price_change_pct = d5m.get("price_change")
            oi, oi_delta = await get_oi_and_delta(symbol, "5min")
            price_deriv, price_spot, _, _ = await get_spot_derivative_spread(symbol)
            if price_deriv is not None and price_spot is not None:
                deviation = (price_deriv - price_spot) / price_spot * 100 if price_spot else 0
                fut_spot_str = (
                    f"–§—å—é—á: {price_deriv:.2f} | "
                    f"–°–ø–æ—Ç: {price_spot:.2f} | "
                    f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {deviation:+.2f}%\n"
                )
            else:
                fut_spot_str = ""

            buy_pct, sell_pct = await get_orderbook_imbalance(symbol)
            if buy_pct is not None and sell_pct is not None:
                diff_pct = round(buy_pct - sell_pct, 1)
                imbalance_str = (
                    f"Order Book: üü¢{buy_pct:.1f}% Buy / üî¥{sell_pct:.1f}% Sell | "
                    f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {diff_pct:+.1f}%\n"
                )
                if buy_pct > 80:
                    imbalance_str += "‚ö†Ô∏è False push –≤–≤–µ—Ä—Ö! –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –ª–æ–Ω–≥–∞–º–∏.\n"
                elif sell_pct > 80:
                    imbalance_str += "‚ö†Ô∏è False push –≤–Ω–∏–∑! –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —à–æ—Ä—Ç–∞–º–∏.\n"
            else:
                imbalance_str = ""

            volatility = await get_volatility(symbol, interval="5")
            volatility_str = f"{volatility:.2f}%" if volatility is not None else "–Ω/–¥"

            price_str = f"{price:.4f}" if price is not None else "–Ω/–¥"
            funding_str = f"{funding:.4f}%" if funding is not None else "–Ω/–¥ ‚ùå"
            volume_str = f"{volume:.2f}" if volume is not None else "–Ω/–¥"
            volume_ratio_str = f"{volume_ratio:.2f}x" if volume_ratio is not None else "–Ω/–¥"
            price_change_str = f"{price_change_pct:+.2f}%" if price_change_pct is not None else "–Ω/–¥"
            oi_str = f"{oi:.0f}" if oi is not None else "–Ω/–¥"
            oi_delta_str = f"{oi_delta:+.2f}%" if oi_delta is not None else "–Ω/–¥"
        # –°–æ–±–∏—Ä–∞–µ–º RSI –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        for label, tf in timeframes.items():
            try:
                d = await asyncio.wait_for(get_data(symbol, tf), timeout=10)
                data[label] = d.get("rsi") if d and "rsi" in d else None
            except Exception as e:
                logger.error(f"RSI fetch failed for {symbol} tf={label}: {e}")
                data[label] = None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö 5m –¥–ª—è {symbol}: {e}")
        for label in timeframes:
            data[label] = None
        fut_spot_str = ""
        imbalance_str = ""
        volatility_str = "–Ω/–¥"
        price_str = funding_str = volume_str = volume_ratio_str = price_change_str = oi_str = oi_delta_str = "–Ω/–¥"

    def mark(val):
        if val is None:
            return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùå"
        elif val < 30:
            return f"{val:.1f} üü¢ (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω)"
        elif val > 70:
            return f"{val:.1f} üî¥ (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω)"
        else:
            return f"{val:.1f} ‚ö†Ô∏è"

    token_name = f"{symbol}.P"
    text = (
        f"üìä {symbol} ‚Äî {price_str} USDT\n"
        f"üí∏ Funding rate: {funding_str}\n"
        f"{fut_spot_str}"
        f"{imbalance_str}"
        f"üìà –û–±—ä—ë–º: {volume_str} ({volume_ratio_str})\n"
        f"üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (5m): {volatility_str}\n"
        f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (5m): {price_change_str}\n"
        f"üìë OI: {oi_str} ({oi_delta_str})\n"
        f"1m: {mark(data.get('1m'))}\n"
        f"5m: {mark(data.get('5m'))}\n"
        f"15m: {mark(data.get('15m'))}\n"
        f"1h: {mark(data.get('1h'))}\n"
        f"4h: {mark(data.get('4h'))}\n"
        f"1d: {mark(data.get('1d'))}\n"
    )
    print(repr(text))  # –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
    return text, token_name  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è!





async def scan_rsi_extremes(return_symbols=False):
    symbols = get_all_symbols()
    oversold = []
    overbought = []
    all_extreme_symbols = []

    for symbol in symbols:
        try:
            d = await asyncio.wait_for(get_data(symbol, "5"), timeout=10)
            if not d or "rsi" not in d:
                continue
            rsi = d["rsi"]
            if rsi < 30:
                oversold.append((symbol, rsi))
                all_extreme_symbols.append(symbol)
            elif rsi > 70:
                overbought.append((symbol, rsi))
                all_extreme_symbols.append(symbol)
        except Exception as e:
            logger.warning(f"‚è± –û—à–∏–±–∫–∞ RSI —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")

    oversold.sort(key=lambda x: x[1])
    overbought.sort(key=lambda x: -x[1])

    result = "üìà RSI —Å–∫–∞–Ω–µ—Ä (5m)\n"
    result += "\nüü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (<30):\n"
    result += "\n".join([f"{s}: {r:.1f} üü¢" for s, r in oversold]) if oversold else "- –Ω–µ—Ç -"
    result += "\n\nüî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (>70):\n"
    result += "\n".join([f"{s}: {r:.1f} üî¥" for s, r in overbought]) if overbought else "- –Ω–µ—Ç -"

    if return_symbols:
        return result, all_extreme_symbols
    return result

from screener_config import FUNDING_THRESHOLD

async def scan_extreme_funding(threshold=FUNDING_THRESHOLD):
    url = "https://api.bybit.com/v5/market/tickers?category=linear"
    try:
        resp = requests.get(url, timeout=10)
        resp.raise_for_status()
        data = resp.json()
        all_tickers = data.get("result", {}).get("list", [])
    except Exception as e:
        logger.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å funding data: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ funding rate"

    extreme = []
    for item in all_tickers:
        try:
            symbol = item.get("symbol", "")
            if not symbol.endswith("USDT"):
                continue
            funding = float(item.get("fundingRate", 0)) * 100
            if abs(funding) >= threshold:
                extreme.append((symbol, funding))
        except Exception:
            continue

    if not extreme:
        return "üò¥ –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å –∞–Ω–æ–º–∞–ª—å–Ω—ã–º —Ñ–∞–Ω–¥–∏–Ω–≥–æ–º."

    extreme.sort(key=lambda x: x[1], reverse=True)
    result = "‚ö°Ô∏è –ê–Ω–æ–º–∞–ª—å–Ω—ã–π Funding Rate:\n"
    for s, f in extreme:
        mark = "üî¥" if f > 0 else "üü¢"
        result += f"{s}: {f:.4f}% {mark}\n"
    return result


from screener_config import PRICE_THRESHOLD

async def scan_price_spikes(price_threshold=PRICE_THRESHOLD):
    symbols = get_all_symbols()
    movers = []
    for symbol in symbols:
        try:
            candle = await asyncio.wait_for(get_last_closed_candle(symbol), timeout=10)
            if not candle:
                continue
            open_price = candle["open"]
            close_price = candle["close"]
            change_pct = (close_price - open_price) / open_price * 100
            if abs(change_pct) >= price_threshold:
                movers.append((symbol, change_pct))
        except Exception as e:
            logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–Ω—ã {symbol}: {e}")
    # –¥–∞–ª—å—à–µ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É



    if not movers:
        return "üò¥ –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º ¬±2% –∑–∞ 5 –º–∏–Ω—É—Ç."

    movers.sort(key=lambda x: abs(x[1]), reverse=True)
    result = "üö® –î–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã ¬±2% (5m):\n"
    for s, pc in movers:
        arrow = "üî∫" if pc > 0 else "üîª"
        result += f"{s}: {pc:+.2f}% {arrow}\n"
    return result

async def scan_volume_spikes(volume_ratio_threshold=3.0):
    symbols = get_all_symbols()
    spikes = []
    for symbol in symbols:
        try:
            d = await asyncio.wait_for(get_data(symbol, "5"), timeout=10)
            if not d:
                continue
            volume_ratio = d.get("volume_ratio")
            if volume_ratio is None:
                continue
            if volume_ratio >= volume_ratio_threshold:
                spikes.append((symbol, volume_ratio))
        except Exception as e:
            logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä—ë–º–∞ {symbol}: {e}")

    if not spikes:
        return "üò¥ –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ –≤—Å–ø–ª–µ—Å–∫–æ–º –æ–±—ä—ë–º–∞."

    spikes.sort(key=lambda x: x[1], reverse=True)
    result = "üìä –í—Å–ø–ª–µ—Å–∫ –æ–±—ä—ë–º–∞ (5m):\n"
    for s, v in spikes:
        result += f"{s}: {v:.2f}x üî•\n"
    return result

from screener_config import (
    RSI_LOW, RSI_HIGH,
    FUNDING_THRESHOLD, PRICE_THRESHOLD, VOLUME_RATIO_THRESHOLD,
    OI_DELTA_THRESHOLD, IMBALANCE_THRESHOLD, VOLATILITY_THRESHOLD,
    SPOT_FUTURES_SPREAD,
    CUSTOM_MODE, MIN_MATCHES
)

import re

def escape_markdown(text: str) -> str:
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

async def scan_all_indicators(
    rsi_low=RSI_LOW,
    rsi_high=RSI_HIGH,
    funding_threshold=FUNDING_THRESHOLD,
    price_threshold=PRICE_THRESHOLD,
    volume_ratio_threshold=VOLUME_RATIO_THRESHOLD,
    oi_delta_threshold=OI_DELTA_THRESHOLD,
    imbalance_threshold=IMBALANCE_THRESHOLD,
    volatility_threshold=VOLATILITY_THRESHOLD,
    spot_futures_spread=SPOT_FUTURES_SPREAD,
    min_matches=MIN_MATCHES
):
    symbols = get_all_symbols()
    results = {
        "ANOMALY_LONG": [],
        "ANOMALY_SHORT": [],
        "VOLUME_PLUS_ANY": [],
        "MIN_MATCHES": []
    }

    async def analyze_symbol(symbol):
        alerts = []
        score = 0
        volume_spike = False
        other_signals = 0

        try:
            d = await asyncio.wait_for(get_data(symbol, "5"), timeout=10)
            if not d:
                return None
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ get_data {symbol}: {e}")
            return None

        rsi = d.get("rsi")
        funding = d.get("funding_rate")
        price_change = d.get("price_change")
        volume_ratio = d.get("volume_ratio")

        if volume_ratio is not None and volume_ratio >= volume_ratio_threshold:
            alerts.append(f"Volume x{volume_ratio:.2f} üî•")
            volume_spike = True
            score += 1

        if rsi is not None:
            if rsi < rsi_low:
                alerts.append(f"RSI {rsi:.1f} üü¢")
                other_signals += 1
                score += 1
            elif rsi > rsi_high:
                alerts.append(f"RSI {rsi:.1f} üî¥")
                other_signals += 1
                score += 1

        if funding is not None and abs(funding) >= funding_threshold:
            mark = "üî¥" if funding > 0 else "üü¢"
            alerts.append(f"Funding {funding*100:+.2f}% {mark}")
            other_signals += 1
            score += 1

        if price_change is not None and abs(price_change) >= price_threshold:
            arrow = "üî∫" if price_change > 0 else "üîª"
            alerts.append(f"Price {price_change:+.2f}% {arrow}")
            other_signals += 1
            score += 1

        oi, oi_delta = await get_oi_and_delta(symbol, "5min")
        if abs(oi_delta) >= oi_delta_threshold:
            arrow = "‚Üë" if oi_delta > 0 else "‚Üì"
            alerts.append(f"OI Œî {oi_delta:+.2f}% {arrow}")
            other_signals += 1
            score += 1

        buy_pct, sell_pct = await get_orderbook_imbalance(symbol)
        if buy_pct is not None and (buy_pct >= imbalance_threshold or sell_pct >= imbalance_threshold):
            side = "Buy" if buy_pct > sell_pct else "Sell"
            alerts.append(f"Imbalance {buy_pct:.1f}/{sell_pct:.1f} ({side})")
            other_signals += 1
            score += 1

        volatility = await get_volatility(symbol, interval="5")
        if volatility is not None and volatility >= volatility_threshold:
            alerts.append(f"Volatility {volatility:.2f}%")
            other_signals += 1
            score += 1

        price_deriv, price_spot, spread, spread_pct = await get_spot_derivative_spread(symbol)
        if spread_pct is not None and abs(spread_pct) >= spot_futures_spread:
            arrow = "‚¨ÜÔ∏è" if spread_pct > 0 else "‚¨áÔ∏è"
            alerts.append(f"Spread {spread_pct:+.2f}% {arrow}")
            other_signals += 1
            score += 1

        # === –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ===
        if (
            price_change <= -5.0 and
            rsi < rsi_low and
            funding <= -0.2 and
            oi_delta >= oi_delta_threshold and
            volatility >= 1.0
        ):
            return ("ANOMALY_LONG", symbol, score, alerts)

        if (
            price_change >= 5.0 and
            rsi > rsi_high and
            funding >= 0.2 and
            oi_delta >= oi_delta_threshold and
            volatility >= 1.0
        ):
            return ("ANOMALY_SHORT", symbol, score, alerts)

        if volume_spike and other_signals > 0:
            return ("VOLUME_PLUS_ANY", symbol, score, alerts)

        if score >= min_matches:
            return ("MIN_MATCHES", symbol, score, alerts)

        return None

    tasks = [analyze_symbol(symbol) for symbol in symbols]
    scanned = await asyncio.gather(*tasks)

    for result in scanned:
        if result:
            mode, symbol, score, alerts = result
            results[mode].append((symbol, score, alerts))

           # === –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç —Å Markdown-—Å—Å—ã–ª–∫–∞–º–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º ===
    report = "üìä –°–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º:\n"
    for mode, items in results.items():
        if not items:
            continue
        emoji = {
            "ANOMALY_LONG": "üü¢ LONG",
            "ANOMALY_SHORT": "üî¥ SHORT",
            "VOLUME_PLUS_ANY": "üìä –û–ë–™–Å–ú",
            "MIN_MATCHES": "‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û"
        }[mode]
        report += f"\n{emoji}:\n"
        for symbol, score, alerts in sorted(items, key=lambda x: x[1], reverse=True):
            link = f"{symbol} ({score}/8):\n"
            report += f"{link} ({score}/8):\n"
            for alert in alerts:
                report += f"‚Ä¢ {alert}\n"

    if report.strip() == "üìä –°–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º:":
        return "üò¥ –ù–µ—Ç –º–æ–Ω–µ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º."

    return report

async def scan_pump_dump(price_threshold=5.0, volume_ratio_threshold=5.0, min_volume=10_000_000):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–º–ø/–¥–∞–º–ø –ø–æ —Ü–µ–Ω–µ ¬±5% –∏ —Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ x5 –Ω–∞ 1m,
    —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ä—ë–º –Ω–∞ 1m >= 1_000_000 (–º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å).
    –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É –Ω–µ—Ç –º–æ–Ω–µ—Ç ‚Äî –±–ª–æ–∫ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è.
    –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    """
    symbols = get_all_symbols()
    pumps = []
    dumps = []
    volume_spikes = []
    volume_drops = []

    for symbol in symbols:
        try:
            d = await asyncio.wait_for(get_data(symbol, "1"), timeout=8)
            if not d:
                continue
            price_change = d.get("price_change")
            volume_ratio = d.get("volume_ratio")
            volume = d.get("volume", 0)
            try:
                volume = float(volume)
            except:
                volume = 0

            # –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ —Å–≤–µ—á–∏ —Å –æ–±—ä—ë–º–æ–º >= min_volume
            if volume < min_volume:
                continue

            # –ü–∞–º–ø/–¥–∞–º–ø –ø–æ —Ü–µ–Ω–µ
            if price_change is not None and price_change >= price_threshold:
                pumps.append((symbol, price_change))
            elif price_change is not None and price_change <= -price_threshold:
                dumps.append((symbol, price_change))

            # –í—Å–ø–ª–µ—Å–∫/–¥–∞–º–ø –ø–æ –æ–±—ä—ë–º—É
            if volume_ratio is not None and volume_ratio >= volume_ratio_threshold:
                volume_spikes.append((symbol, volume_ratio))
            elif volume_ratio is not None and volume_ratio <= 1.0 / volume_ratio_threshold:
                volume_drops.append((symbol, volume_ratio))

        except Exception as e:
            logger.warning(f"‚ö† –û—à–∏–±–∫–∞ pump/dump —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")

    result_lines = ["üö® *Pump/Dump —Å–∫–∞–Ω–µ—Ä (1m)*"]

    if pumps:
        result_lines.append("\nüî∫ –ü–∞–º–ø –ø–æ —Ü–µ–Ω–µ (>= +5%):")
        result_lines += [f"{s}: {pc:+.2f}%" for s, pc in pumps]
    if dumps:
        result_lines.append("\nüîª –î–∞–º–ø –ø–æ —Ü–µ–Ω–µ (<= -5%):")
        result_lines += [f"{s}: {pc:+.2f}%" for s, pc in dumps]
    if volume_spikes:
        result_lines.append("\nüî• –í—Å–ø–ª–µ—Å–∫ –æ–±—ä—ë–º–∞ (x5 –∏ –±–æ–ª–µ–µ):")
        result_lines += [f"{s}: {v:.2f}x" for s, v in volume_spikes]
    if volume_drops:
        result_lines.append("\nüíÄ –î–∞–º–ø –æ–±—ä—ë–º–∞ (x0.2 –∏ –º–µ–Ω—å—à–µ):")
        result_lines += [f"{s}: {v:.2f}x" for s, v in volume_drops]

    if len(result_lines) == 1:
        return ""  # –í–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–æ–¥–∏–º –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞

    return "\n".join(result_lines)
    from collections import Counter

import aiohttp

async def find_simple_price_levels(
    symbol: str,
    interval: str = "60",     # 1H
    limit: int = 744,         # 1 –º–µ—Å—è—Ü
    bounce_pct: float = 0.02, # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % –æ—Ç—Å–∫–æ–∫–∞
    level_tol: float = 0.001, # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
    min_bounces: int = 2,     # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –æ—Ç—Å–∫–æ–∫–æ–≤ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
    round_digits: int = 4,    # —Ç–æ—á–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    look_ahead: int = 6,      # —Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –≤–ø–µ—Ä—ë–¥ –∏—Å–∫–∞—Ç—å —Ä–µ–∞–∫—Ü–∏—é
    min_volume_mult: float = 2.0, # –æ–±—ä—ë–º –≤ —Å–≤–µ—á–∫–µ-–æ—Ç—Å–∫–æ–∫–µ –≤ X —Ä–∞–∑ –≤—ã—à–µ –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ
):
    import aiohttp
    url = f"https://api.bybit.com/v5/market/kline?category=linear&symbol={symbol}&interval={interval}&limit={limit}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            if data.get("retCode") != 0:
                raise Exception(f"Bybit API error: {data.get('retMsg')}")
            ohlcv = data["result"]["list"]

    highs = [float(c[2]) for c in ohlcv]
    lows  = [float(c[3]) for c in ohlcv]
    closes = [float(c[4]) for c in ohlcv]
    volumes = [float(c[5]) for c in ohlcv]
    median_vol = sorted(volumes)[len(volumes)//2]

    # --- HIGH: —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–æ—Ç—Å–∫–æ–∫ –≤–Ω–∏–∑)
    high_levels = {}
    for i in range(len(highs) - look_ahead):
        price = round(highs[i], round_digits)
        for j in range(1, look_ahead + 1):
            next_price = closes[i + j]
            next_vol = volumes[i + j]
            move = (next_price - price) / price
            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ –æ—Ç—Å–∫–æ–∫–∏ –≤–Ω–∏–∑
            if move > -bounce_pct or abs(move) < bounce_pct:
                continue
            if next_vol < min_volume_mult * median_vol:
                continue
            if price not in high_levels:
                high_levels[price] = []
            high_levels[price].append((move, next_vol))
            break

    # --- LOW: –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö)
    low_levels = {}
    for i in range(len(lows) - look_ahead):
        price = round(lows[i], round_digits)
        for j in range(1, look_ahead + 1):
            next_price = closes[i + j]
            next_vol = volumes[i + j]
            move = (next_price - price) / price
            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ –æ—Ç—Å–∫–æ–∫–∏ –≤–≤–µ—Ä—Ö
            if move < bounce_pct or abs(move) < bounce_pct:
                continue
            if next_vol < min_volume_mult * median_vol:
                continue
            if price not in low_levels:
                low_levels[price] = []
            low_levels[price].append((move, next_vol))
            break

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = []
    for lvl, bounces in high_levels.items():
        if len(bounces) >= min_bounces:
            avg_bounce = sum(abs(x[0]) for x in bounces) / len(bounces)
            avg_vol = sum(x[1] for x in bounces) / len(bounces)
            result.append((lvl, "high", len(bounces), avg_bounce * 100, avg_vol))
    for lvl, bounces in low_levels.items():
        if len(bounces) >= min_bounces:
            avg_bounce = sum(abs(x[0]) for x in bounces) / len(bounces)
            avg_vol = sum(x[1] for x in bounces) / len(bounces)
            result.append((lvl, "low", len(bounces), avg_bounce * 100, avg_vol))

    result.sort(key=lambda x: -x[2])  # –ø–æ —á–∏—Å–ª—É –æ—Ç—Å–∫–æ–∫–æ–≤
    return result











    




        



# –û—Å—Ç–∞–ª—å–Ω—ã–µ async-—Å–∫–∞–Ω–µ—Ä—ã (`scan_rsi_extremes`, `scan_volume_spikes`, `scan_extreme_funding`, `scan_all_indicators`, `scan_pump_dump`) ‚Äî –Ω–µ –º–µ–Ω—è–ª–∏—Å—å, –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–π –∏—Ö —Å—é–¥–∞ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
# –í–µ–∑–¥–µ —É–±–µ—Ä–∏ –¥—É–±–ª–∏, –º—É—Å–æ—Ä –∏ —Å–ª–µ–¥–∏ –∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–π.

# –í –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ —ç—Ç–æ Telegram-–±–æ—Ç:
# report = escape_markdown(report)
# client.send_message(..., report, parse_mode='MarkdownV2')

