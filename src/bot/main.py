import os
import re
import logging  # ‚Üê –≤–æ—Ç —ç—Ç–æ –¥–æ–±–∞–≤—å
import asyncio
from telethon import TelegramClient, events
from signals import find_simple_price_levels
from dotenv import load_dotenv
from signals import (
    get_rsi_signal,
    get_all_symbols,
    scan_rsi_extremes,
    scan_extreme_funding,
    scan_price_spikes,
    scan_volume_spikes,
    scan_all_indicators,
    scan_pump_dump,
    find_simple_price_levels
)
def escape_markdown(text: str) -> str:
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

BOT_USERNAME = "top5signalbot"  # <- —Ç–≤–æ–π username –ë–ï–ó @

logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

load_dotenv()
api_id = os.getenv("API_ID")
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")

if not api_id or not api_hash or not bot_token:
    raise RuntimeError("‚ùå –í .env –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å API_ID, API_HASH –∏ BOT_TOKEN")

try:
    api_id = int(api_id)
except ValueError:
    raise RuntimeError("‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")

client = TelegramClient('signalbot', api_id, api_hash).start(bot_token=bot_token)
active_alerts = {}

async def safe_respond(event, text: str, buttons=None, linkify=True):
    try:
        if linkify:
            await event.respond(linkify_text(text), buttons=buttons, parse_mode='Markdown')
        else:
            await event.respond(text, buttons=buttons, parse_mode='Markdown')
    except Exception as e:
        print(f"safe_respond ERROR: {e}")

def make_token_link(symbol: str) -> str:
    return f"[{escape_markdown(symbol)}](https://t.me/{BOT_USERNAME}?start=signal_{symbol})"

def linkify_text(text):
    # –¢–µ–ø–µ—Ä—å –ª–æ–≤–∏—Ç —Ç–∏–∫–µ—Ä—ã –¥–ª–∏–Ω–æ–π –æ—Ç 1 –±—É–∫–≤—ã: A-Z, —Ü–∏—Ñ—Ä—ã, –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤ + USDT
    pattern = r'(?<!\w)([A-Z0-9]{1,20}USDT)(?!\w)'
    return re.sub(pattern, lambda m: make_token_link(m.group(1)), text)

def is_empty_pumpdump(msg: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —á–µ—Ç—ã—Ä–µ –±–ª–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ '- –Ω–µ—Ç -'."""
    return (
        "üî∫ –ü–∞–º–ø –ø–æ —Ü–µ–Ω–µ" in msg and "- –Ω–µ—Ç -" in msg and
        "üîª –î–∞–º–ø –ø–æ —Ü–µ–Ω–µ" in msg and msg.count("- –Ω–µ—Ç -") >= 4
    )

@client.on(events.NewMessage(pattern=r'^/signal(?:\s+([A-Za-z0-9_]+))?$'))
async def cmd_signal(event):
    m = event.pattern_match
    symbol = m.group(1).upper() if m.group(1) else "BTCUSDT"
    valid = get_all_symbols()
    if valid is not None and symbol not in valid:
        await safe_respond(event, f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω.", linkify=False)
        return

    sig, token_name = await get_rsi_signal(symbol)
    if not sig:
        await safe_respond(event, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ {symbol}.", linkify=False)
        return

    signal_link = f"https://t.me/{BOT_USERNAME}?start=signal_{symbol}"
    # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤–≤–µ—Ä—Ö—É, –Ω–∏–∫–∞–∫–∏—Ö –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö BTCUSDT.P —Å–≤–µ—Ä—Ö—É!
    title = f"[{symbol}]({signal_link}) ‚Äî RSI (1m / 5m / 15m)"

    await safe_respond(
        event,
        f"{title}\n\n{sig}\n\n`{token_name}`",
        linkify=False
    )


@client.on(events.NewMessage(pattern=r'^/rsi_scan$'))
async def cmd_rsi_scan(event):
    await safe_respond(event, "üîé –°–∫–∞–Ω–∏—Ä—É—é RSI –ø–æ 5m‚Ä¶ ")
    result_text, symbols = await scan_rsi_extremes(return_symbols=True)
    await safe_respond(event, result_text)

@client.on(events.NewMessage(pattern=r'^/funding$'))
async def cmd_funding(event):
    await safe_respond(event, "üì° –°–∫–∞–Ω–∏—Ä—É—é –∞–Ω–æ–º–∞–ª—å–Ω—ã–π —Ñ–∞–Ω–¥–∏–Ω–≥‚Ä¶")
    result = await scan_extreme_funding()
    await safe_respond(event, result)

@client.on(events.NewMessage(pattern=r'^/movers$'))
async def cmd_movers(event):
    await safe_respond(event, "üìà –°–∫–∞–Ω–∏—Ä—É—é —Ç–æ–∫–µ–Ω—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º ¬±2% (5m)...")
    result = await scan_price_spikes()
    await safe_respond(event, result)

@client.on(events.NewMessage(pattern=r'^/volumes$'))
async def cmd_volumes(event):
    await safe_respond(event, "üìä –°–∫–∞–Ω–∏—Ä—É—é —Ç–æ–∫–µ–Ω—ã —Å –æ–±—ä—ë–º–æ–º x3+ (5m)...")
    result = await scan_volume_spikes()
    await safe_respond(event, result)

@client.on(events.NewMessage(pattern=r'^/pumpdump$'))
async def cmd_pumpdump(event):
    await safe_respond(event, "üö® –°–∫–∞–Ω–∏—Ä—É—é –ø–∞–º–ø—ã/–¥–∞–º–ø—ã –∏ –æ–±—ä—ë–º—ã (1m)‚Ä¶")
    result = await scan_pump_dump()
    if is_empty_pumpdump(result):
        await safe_respond(event, "‚ùå –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –ø–∞–º–ø–æ–≤ –∏–ª–∏ –¥–∞–º–ø–æ–≤.")
    else:
        await safe_respond(event, result)

@client.on(events.NewMessage(pattern=r'^/startpumpdump$'))
async def start_pumpdump_alert(event):
    chat_id = event.chat_id
    if f"pumpdump_{chat_id}" in active_alerts:
        await safe_respond(event, "‚ö†Ô∏è Pump/Dump-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
    else:
        task = asyncio.create_task(run_pumpdump_alert_loop(chat_id))
        active_alerts[f"pumpdump_{chat_id}"] = task
        await safe_respond(event, "‚úÖ Pump/Dump-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω, —Å–∫—Ä–∏–Ω–Ω–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç ¬±5% –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ –•5 —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–ª–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ –Ω–∞ 1–º —Å–≤–µ—á–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.")

@client.on(events.NewMessage(pattern=r'^/stoppumpdump$'))
async def stop_pumpdump_alert(event):
    chat_id = event.chat_id
    task = active_alerts.pop(f"pumpdump_{chat_id}", None)
    if task:
        task.cancel()
        await safe_respond(event, "üõë Pump/Dump-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await safe_respond(event, "‚ÑπÔ∏è Pump/Dump-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ç–∞–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")

async def run_pumpdump_alert_loop(chat_id):
    try:
        while True:
            msg = await scan_pump_dump()
            msg = linkify_text(msg)
            if not msg.strip():      # <--- –¥–æ–±–∞–≤—å –≤–æ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É!
                await asyncio.sleep(60)
                continue
            await client.send_message(chat_id, msg, parse_mode='Markdown')
            await asyncio.sleep(60)

    except asyncio.CancelledError:
        logger.info(f"PumpDump-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è chat_id {chat_id}")
    except Exception as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_pumpdump_alert_loop –¥–ª—è {chat_id}: {e}")

@client.on(events.CallbackQuery(data=re.compile(b'^signal:(.+)$')))
async def callback_signal(event):
    symbol = event.data.decode().split(":")[1]
    await event.answer("‚è± –ü–æ–ª—É—á–∞—é RSI‚Ä¶", alert=False)
    sig, token_name = await get_rsi_signal(symbol)
    copy_hint = f"\n\n`{token_name}`\n_–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–∫–µ—Ä–∞_"
    await safe_respond(event, f"{sig}{copy_hint}", linkify=False)

@client.on(events.NewMessage(pattern=r'^/startalert$'))
async def start_alert_command(event):
    chat_id = event.chat_id
    if chat_id in active_alerts:
        await safe_respond(event, "‚ö†Ô∏è –û–Ω–ª–∞–π–Ω-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
    else:
        task = asyncio.create_task(run_alert_loop(chat_id))
        active_alerts[chat_id] = task
        await safe_respond(event, "‚úÖ –û–Ω–ª–∞–π–Ω-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω.")

@client.on(events.NewMessage(pattern=r'^/stopalert$'))
async def stop_alert_command(event):
    chat_id = event.chat_id
    task = active_alerts.pop(chat_id, None)
    if task:
        task.cancel()
        await safe_respond(event, "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await safe_respond(event, "‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ç–∞–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")

async def run_alert_loop(chat_id):
    try:
        while True:
            msg = await scan_all_indicators()
            await client.send_message(chat_id, linkify_text(msg), parse_mode='Markdown')
            await asyncio.sleep(300)
    except asyncio.CancelledError:
        logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è chat_id {chat_id}")
    except Exception as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_alert_loop –¥–ª—è {chat_id}: {e}")

@client.on(events.NewMessage(pattern=r'^/start(?:\s+signal_(\w+))?'))
async def handle_start_signal(event):
    m = event.pattern_match
    symbol = m.group(1)
    if not symbol:
        await safe_respond(event, "üëã –ò—Å–ø–æ–ª—å–∑—É–π /signal \"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (BTCUSDT)\" —á—Ç–æ –±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º —Ç–æ–∫–µ–Ω–∞.", linkify=False)
        return

    symbol = symbol.upper()
    valid = get_all_symbols()
    if valid is not None and symbol not in valid:
        await safe_respond(event, f"‚ùå {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ ({len(valid)}).", linkify=False)
        return

    await safe_respond(event, f"üì• –ü–æ–ª—É—á–∞—é —Å–∏–≥–Ω–∞–ª –ø–æ {symbol}‚Ä¶", linkify=False)
    sig, token_name = await get_rsi_signal(symbol)

    # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–∞–∫ –∏ –≤ signal
    signal_link = f"https://t.me/{BOT_USERNAME}?start=signal_{symbol}"
    title = f"[{symbol}]({signal_link}) ‚Äî RSI (1m / 5m / 15m)"

    await safe_respond(
        event,
        f"{title}\n\n{sig}\n\n`{token_name}`",
        linkify=False
    )
@client.on(events.NewMessage(pattern=r'^/levels$'))
async def cmd_levels(event):
    max_tokens = 10
    await safe_respond(event, "üìä –°–∫–∞–Ω–∏—Ä—É—é –º–æ–Ω–µ—Ç—ã, –∏—â—É —É—Ä–æ–≤–Ω–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ—Ç—Å–∫–æ–∫–∞–º–∏ (1H, 1 –º–µ—Å—è—Ü)...")
    symbols = get_all_symbols()
    limit = 150  # 788 —ç—Ç–æ 1 –º–µ—Å—è—Ü –ø–æ 1H

    # –¢–≤–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã:
    bounce_pct = 0.05       # 5% –æ—Ç—Å–∫–æ–∫
    min_bounces = 3         # –º–∏–Ω–∏–º—É–º 2 –æ—Ç—Å–∫–æ–∫–∞
    min_volume_mult = 2.0  # –æ–±—ä–µ–º X10 –∫ –º–µ–¥–∏–∞–Ω–µ
    direction = "resist"    # –∏–ª–∏ "support"

    async def process(symbol):
        try:
            levels = await find_simple_price_levels(
                symbol,
                interval="240",
                limit=limit,
                bounce_pct=bounce_pct,
                min_bounces=min_bounces,
                round_digits=4,
                look_ahead=6,
                min_volume_mult=min_volume_mult,
            )
            if not levels:
                return None
            # top_level = (level, lvl_type, hits, avg_pct, avg_vol)
            top_level = levels[0]
            return symbol, *top_level
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None

    tasks = [process(s) for s in symbols]
    results = await asyncio.gather(*tasks)
    results = [r for r in results if r]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∏—Å–ª—É –æ—Ç—Å–∫–æ–∫–æ–≤ ‚Üì‚Üì‚Üì
    results.sort(key=lambda x: -x[3])

    if not results:
        await safe_respond(event, "‚ùå –ù–µ—Ç —É—Ä–æ–≤–Ω–µ–π —Å —Å–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å–∫–æ–∫–∞–º–∏.")
        return

    msg = "üìä *–¢–æ–ø-10 –º–æ–Ω–µ—Ç —Å —Å–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å–∫–æ–∫–∞–º–∏ (1H, 1 –º–µ—Å—è—Ü):*\n\n"
    for symbol, level, lvl_type, hits, avg_pct, avg_vol in results:
        price_fmt = f"{level:.5f}" if level < 1 else f"{level:.2f}"
        tag = "HIGH" if lvl_type == "high" else "LOW"
        msg += (
            f"{symbol} {tag} {price_fmt} ‚Äî {hits} –æ—Ç—Å–∫–æ–∫–æ–≤, "
            f"—Å—Ä.–æ—Ç—Å–∫–æ–∫ {avg_pct:.2f}%, —Å—Ä.–æ–±—ä—ë–º {int(avg_vol):,}\n"
        )

    await safe_respond(event, msg)






    
if __name__ == "__main__":
    print("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    client.run_until_disconnected()
    




